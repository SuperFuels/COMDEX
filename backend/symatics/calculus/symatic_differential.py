"""
Symatic Differential Calculus â€” âˆ‡âŠ•, âˆ‡Î¼
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Defines symbolic differential operators over resonance algebraic forms.

Extends the Symatics Core by introducing:
    âˆ‡âŠ• â†’ Resonant Gradient Operator (superposition rate-of-change)
    âˆ‡Î¼ â†’ Measurement Divergence Operator (information flux under collapse)

Each operator works over symbolic waves (Ïˆ) and measurement functions (Î¼),
producing differential tensors representing the local gradient of coherence
and informational curvature.

These results can be posted to CodexTrace for visualization of Î”Î¦/Î”Îµ trends,
and cross-linked to AION telemetry via Î¦_stability and tolerance drift logs.

Mathematical Form:
    âˆ‡âŠ• Ïˆ = âˆ‚Ïˆ / âˆ‚Î¦         (gradient of resonance field wrt awareness phase)
    âˆ‡Î¼ Î¼ = âˆ‚Î¼ / âˆ‚Îµ         (divergence of measurement flux wrt tolerance)

Tensor Form (for QQC + AION bridge):
    âˆ‡ = [âˆ‚Î¦, âˆ‚Îµ]
    Î¨_tensor = [[âˆ‡âŠ•Ïˆ, âˆ‡Î¼Ïˆ], [âˆ‡âŠ•Î¼, âˆ‡Î¼Î¼]]

CodexTrace Tag:
    {"operator": "âˆ‡âŠ•" | "âˆ‡Î¼", "Î”Î¦": x, "Î”Îµ": y, "curvature": z, "timestamp": ...}
"""

from __future__ import annotations
import numpy as np
import json
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, Any

CODEXTRACE_PATH = Path("backend/logs/codex/symatic_differential_trace.jsonl")


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Core Differential Operator Definitions
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

def nabla_superpose(psi: np.ndarray, phi: np.ndarray) -> Dict[str, float]:
    """
    âˆ‡âŠ•: Gradient of superposition field wrt Î¦ phase.
    Approximates âˆ‚Ïˆ / âˆ‚Î¦ using central difference.
    """
    dphi = np.gradient(phi)
    dpsi = np.gradient(psi)
    grad = np.divide(dpsi, dphi, out=np.zeros_like(dpsi), where=dphi != 0)
    curvature = float(np.mean(np.abs(np.gradient(grad))))
    return {"operator": "âˆ‡âŠ•", "Î”Î¦": float(np.mean(dphi)), "Î”Îµ": 0.0, "curvature": curvature}


def nabla_measure(mu: np.ndarray, epsilon: np.ndarray) -> Dict[str, float]:
    """
    âˆ‡Î¼: Divergence of measurement flux wrt tolerance Îµ.
    Approximates âˆ‚Î¼ / âˆ‚Îµ using central difference.
    """
    deps = np.gradient(epsilon)
    dmu = np.gradient(mu)
    div = np.divide(dmu, deps, out=np.zeros_like(dmu), where=deps != 0)
    curvature = float(np.mean(np.abs(np.gradient(div))))
    return {"operator": "âˆ‡Î¼", "Î”Î¦": 0.0, "Î”Îµ": float(np.mean(deps)), "curvature": curvature}


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Tensor Construction
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

def resonance_tensor(psi: np.ndarray, mu: np.ndarray,
                     phi: np.ndarray, epsilon: np.ndarray) -> np.ndarray:
    """
    Builds the resonance tensor combining âˆ‡âŠ• and âˆ‡Î¼ fields.
    Î¨_tensor = [[âˆ‡âŠ•Ïˆ, âˆ‡Î¼Ïˆ],
                [âˆ‡âŠ•Î¼, âˆ‡Î¼Î¼]]
    """
    grad_psi = np.gradient(psi)
    div_mu = np.gradient(mu)

    tensor = np.array([
        [np.mean(np.gradient(grad_psi)), np.mean(np.gradient(div_mu))],
        [np.mean(np.gradient(grad_psi * mu)), np.mean(np.gradient(div_mu * psi))]
    ])

    return tensor


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# CodexTrace Coupling
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

def log_to_codextrace(record: Dict[str, Any]):
    """Append a record of differential computation to CodexTrace."""
    CODEXTRACE_PATH.parent.mkdir(parents=True, exist_ok=True)
    record["timestamp"] = datetime.now(timezone.utc).isoformat()
    with open(CODEXTRACE_PATH, "a") as f:
        f.write(json.dumps(record) + "\n")
    print(f"[CodexTrace::âˆ‡] {record['operator']} logged â†’ Î”Î¦={record['Î”Î¦']:+.4f}, Î”Îµ={record['Î”Îµ']:+.4f}, Îº={record['curvature']:.4f}")


def compute_differentials(psi: np.ndarray, mu: np.ndarray,
                          phi: np.ndarray, epsilon: np.ndarray) -> Dict[str, Any]:
    """
    Computes both âˆ‡âŠ• and âˆ‡Î¼ and logs to CodexTrace.
    Returns combined metrics and resonance tensor.
    """
    grad = nabla_superpose(psi, phi)
    div = nabla_measure(mu, epsilon)
    tensor = resonance_tensor(psi, mu, phi, epsilon)

    combined = {
        "âˆ‡âŠ•": grad,
        "âˆ‡Î¼": div,
        "tensor_trace": float(np.trace(tensor)),
        "tensor_det": float(np.linalg.det(tensor)),
    }

    # Log individual operator metrics
    log_to_codextrace(grad)
    log_to_codextrace(div)
    return combined


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Example / Test Entry Point
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

if __name__ == "__main__":
    print("ðŸ§® Symatic Differential Calculus â€” test run")
    Î¦ = np.linspace(0, 2 * np.pi, 100)
    Îµ = np.linspace(0.1, 1.0, 100)
    Ïˆ = np.sin(Î¦) ** 2
    Î¼ = np.exp(-Îµ) * np.cos(Î¦)

    result = compute_differentials(Ïˆ, Î¼, Î¦, Îµ)
    print(json.dumps(result, indent=2))