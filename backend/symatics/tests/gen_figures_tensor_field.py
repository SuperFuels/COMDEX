# backend/symatics/tests/gen_figures_tensor_field.py
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Tessaris Symatics v0.8 â€” Tensor Field Visualization Script
# Generates docs/figures/tensor_resonance_manifold.png
# Visualizes Î»âŠ—Ïˆ resonance manifold and coherence flux.
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

import numpy as np
import matplotlib.pyplot as plt
from backend.symatics.core.tensor_field_engine import ResonantTensorField

def generate_tensor_resonance_figure():
    # Initialize tensor field
    field = ResonantTensorField(shape=(48, 48))
    Ïˆ, Î» = field.Ïˆ, field.Î»

    # Run a few evolution steps
    for _ in range(25):
        Ïˆ, Î» = field.step(dt=0.05)

    # Compute coherence flux surface
    coherence = np.exp(-np.linalg.norm(np.gradient(Ïˆ), axis=0))

    # Prepare figure
    fig, ax = plt.subplots(figsize=(7, 6))
    X, Y = np.meshgrid(np.linspace(0, 1, Ïˆ.shape[1]), np.linspace(0, 1, Ïˆ.shape[0]))

    contour = ax.contourf(X, Y, Ïˆ, levels=100, cmap="viridis", alpha=0.85)
    ax.streamplot(X, Y, Î», Ïˆ, color="white", density=0.6, linewidth=0.5)
    ax.set_title("Î»âŠ—Ïˆ Tensor Resonance Manifold", fontsize=13)
    ax.set_xlabel("Ïˆ-domain")
    ax.set_ylabel("Î»-domain")

    # Overlay coherence contours
    coh = ax.contour(X, Y, coherence, levels=10, colors="magenta", linewidths=0.7)
    ax.clabel(coh, fmt="%.2f", fontsize=7, colors="magenta")

    # Save figure
    plt.tight_layout()
    output_path = "docs/figures/tensor_resonance_manifold.png"
    plt.savefig(output_path, dpi=200)
    plt.close(fig)
    print(f"âœ… Saved {output_path}")
    print("ðŸŽ¨ Tensor resonance manifold visualization complete â€” ready for Volume IX.")

if __name__ == "__main__":
    generate_tensor_resonance_figure()