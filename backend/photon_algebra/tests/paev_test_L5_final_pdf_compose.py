# backend/photon_algebra/tests/paev_test_L5_final_pdf_compose.py
"""
L5 — Final PDF Composer
Merges the populated whitepaper (L4 output), appendices, and figures
into a single archival-grade PDF ready for publication or distribution.
"""

from __future__ import annotations
import os
from pathlib import Path
from datetime import datetime
from PyPDF2 import PdfMerger
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.units import inch

print("=== L5 — Final PDF Composition ===")

# -------------------------------------------------------
# Define paths
# -------------------------------------------------------
docs_dir = Path("docs/rfc")
modules_dir = Path("backend/modules/knowledge")
plots_dir = Path(".")

# Inputs
populated_pdf = docs_dir / "TOE_Whitepaper_v1.2_populated.pdf"
appendix_tex = docs_dir / "TOE_Whitepaper_Appendices.tex"
constants_json = modules_dir / "constants_v1.1.json"
repro_json = modules_dir / "reproducibility_v1.json"

# Output
final_pdf = docs_dir / "TOE_Whitepaper_Final.pdf"
docs_dir.mkdir(parents=True, exist_ok=True)

# -------------------------------------------------------
# 1. Generate a cover page for the final merged document
# -------------------------------------------------------
cover_pdf = docs_dir / "_cover_temp.pdf"

from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle

styles = getSampleStyleSheet()
doc = SimpleDocTemplate(str(cover_pdf), pagesize=A4)
story = []

story.append(Paragraph("<b>Unified TOE Framework — Final Consolidated Edition</b>", styles["Title"]))
story.append(Spacer(1, 24))
story.append(Paragraph(
    "This final document integrates all validated computational, symbolic, and reproducibility results "
    "from the COMDEX Research Initiative H→L test series.", styles["Normal"]))
story.append(Spacer(1, 12))
story.append(Paragraph(f"Generated: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}", styles["Normal"]))
story.append(Spacer(1, 36))

meta_table = Table([
    ["Version", "v1.3 (Post-L5 Consolidation)"],
    ["Generated by", "TOE Engine"],
    ["Includes", "L1–L5 results, appendices, and figures"]
], colWidths=[150, 300])

meta_table.setStyle(TableStyle([
    ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
    ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
]))
story.append(meta_table)
story.append(Spacer(1, 24))

story.append(Paragraph("All numerical constants and reproducibility metrics are verified against L2 and L4 data exports.", styles["Normal"]))
story.append(Spacer(1, 36))
story.append(Paragraph("Prepared automatically using COMDEX/TOE backend pipeline.", styles["Italic"]))

doc.build(story)
print(f"✅ Cover page created → {cover_pdf}")

# -------------------------------------------------------
# 2. Merge PDFs (cover + whitepaper + appendices if exist)
# -------------------------------------------------------
merger = PdfMerger()

if cover_pdf.exists():
    merger.append(str(cover_pdf))
if populated_pdf.exists():
    merger.append(str(populated_pdf))

# Convert appendix .tex if available
if appendix_tex.exists():
    from reportlab.lib.styles import ParagraphStyle
    appendix_pdf = docs_dir / "_appendix_temp.pdf"
    appendix_doc = SimpleDocTemplate(str(appendix_pdf), pagesize=A4)
    appendix_story = []
    appendix_story.append(Paragraph("Appendix Material (from TOE_Whitepaper_Appendices.tex)", styles["Heading1"]))
    appendix_story.append(Spacer(1, 12))
    appendix_story.append(Paragraph(appendix_tex.read_text(), styles["Code"]))
    appendix_doc.build(appendix_story)
    merger.append(str(appendix_pdf))

# -------------------------------------------------------
# 3. Add any PAEV plots found in working directory
# -------------------------------------------------------
figures = sorted(Path(".").glob("PAEV_L*.png"))
if figures:
    figs_pdf = docs_dir / "_figures_temp.pdf"
    fig_doc = SimpleDocTemplate(str(figs_pdf), pagesize=A4)
    fig_story = [Paragraph("Figures — L-Series Output", styles["Heading1"]), Spacer(1, 12)]
    for fig in figures:
        fig_story.append(Image(str(fig), width=5.5*inch, height=3.5*inch))
        fig_story.append(Spacer(1, 12))
    fig_doc.build(fig_story)
    merger.append(str(figs_pdf))
    print(f"✅ Embedded {len(figures)} figures from L-series")

# -------------------------------------------------------
# 4. Write final merged PDF
# -------------------------------------------------------
merger.write(str(final_pdf))
merger.close()

# Cleanup temporary files
for f in [cover_pdf, docs_dir / "_appendix_temp.pdf", docs_dir / "_figures_temp.pdf"]:
    if f.exists():
        try:
            f.unlink()
        except Exception:
            pass

print(f"✅ Final TOE Whitepaper compiled → {final_pdf.resolve()}")
print("----------------------------------------------------------")
print("All sections merged successfully:")
print(" - Cover page")
print(" - L4 populated whitepaper")
print(" - Appendix (if available)")
print(" - L-series plots")
print("----------------------------------------------------------")