#!/usr/bin/env python3
"""
Tessaris Discovery Report Builder
---------------------------------
Generates Markdown + PDF discovery reports for any completed physics series.
If a "<series>_series_synthesis.json" exists, it is placed as the Executive Summary.
Usage:
    python backend/photon_algebra/utils/build_discovery_report.py --series N
"""

import os, json, glob, argparse, datetime
import pypandoc

DISCOVERY_DIR = "backend/modules/discoveries"
KNOWLEDGE_DIR = "backend/modules/knowledge"
REGISTRY_PATH = os.path.join(DISCOVERY_DIR, "discovery_registry.json")

# -----------------------------------------------------------
def collect_series(series_tag: str):
    synthesis_file = os.path.join(KNOWLEDGE_DIR, f"{series_tag}_series_synthesis.json")
    synthesis = None
    if os.path.exists(synthesis_file):
        with open(synthesis_file, "r") as fh:
            try:
                synthesis = json.load(fh)
            except Exception as e:
                print(f"⚠️ Failed to load synthesis file: {e}")
    pattern = os.path.join(KNOWLEDGE_DIR, f"{series_tag}*_summary.json")
    files = sorted(glob.glob(pattern))
    data = []
    for f in files:
        try:
            with open(f, "r") as fh:
                js = json.load(fh)
                js["_file"] = f
                data.append(js)
        except Exception as e:
            print(f"⚠️ Skipped {f}: {e}")
    return synthesis, data

# -----------------------------------------------------------
def generate_markdown(series_tag: str, synthesis, entries: list):
    now = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    md = [f"# Tessaris Discovery Report — {series_tag}-Series",
          f"**Generated:** {now}",
          "",
          f"**Series Tag:** `{series_tag}`",
          f"**Modules Detected:** {len(entries)}",
          "",
          "---", ""]

    # Executive summary
    if synthesis:
        md.append("## Executive Summary")
        md.append("")
        for k, v in synthesis.items():
            if isinstance(v, (int, float, str)):
                md.append(f"- **{k}**: {v}")
        md.append("")
        md.append("---")
        md.append("")

    # Constants baseline
    if entries:
        base = entries[0]
        md.append("## Constants Baseline\n")
        for k in ["ħ", "G", "Λ", "α", "β"]:
            if k in base:
                md.append(f"- {k} = {base[k]}")
        md.append("\n---\n")

    # Individual module summaries
    md.append("## Module Summaries\n")
    for e in entries:
        name = os.path.basename(e.get("_file", ""))
        md.append(f"### {name}")
        for k, v in e.items():
            if k.startswith("_") or k in ["ħ", "G", "Λ", "α", "β"]:
                continue
            md.append(f"- **{k}**: {v}")
        md.append("")
    md.append("---\n")

    md.append("## Discovery Classification\n")
    md.append(f"This {series_tag}-Series represents a verified discovery event within the Tessaris physics framework.")
    md.append(f"Registered automatically on {now}.\n")
    md.append("\n---\n")
    md.append("**Generated by Tessaris Build System**\n")
    md.append("All constants referenced: ħ, G, Λ, α, β from registry v1.2.\n")
    return "\n".join(md)

# -----------------------------------------------------------
def write_report(series_tag: str, markdown: str):
    os.makedirs(DISCOVERY_DIR, exist_ok=True)
    base_name = f"Tessaris_Discovery_{series_tag}Series_2025"
    md_path = os.path.join(DISCOVERY_DIR, f"{base_name}.md")
    pdf_path = os.path.join(DISCOVERY_DIR, f"{base_name}.pdf")
    with open(md_path, "w") as f:
        f.write(markdown)
    try:
        pypandoc.convert_text(markdown, "pdf", format="md",
                              outputfile=pdf_path, extra_args=["--standalone"])
    except Exception as e:
        print(f"⚠️ PDF conversion failed: {e}")
    return md_path, pdf_path

# -----------------------------------------------------------
def update_registry(series_tag: str, md_path: str, pdf_path: str):
    os.makedirs(DISCOVERY_DIR, exist_ok=True)
    reg = {}
    if os.path.exists(REGISTRY_PATH):
        with open(REGISTRY_PATH, "r") as f:
            try:
                reg = json.load(f)
            except:
                reg = {}
    reg[series_tag] = {
        "markdown": md_path,
        "pdf": pdf_path,
        "timestamp": datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%MZ")
    }
    with open(REGISTRY_PATH, "w") as f:
        json.dump(reg, f, indent=2)

# -----------------------------------------------------------
def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--series", required=True, help="Series tag (e.g. A, M, N)")
    args = ap.parse_args()

    synthesis, entries = collect_series(args.series)
    if not entries:
        print(f"❌ No summary files found for series {args.series}")
        return

    markdown = generate_markdown(args.series, synthesis, entries)
    md_path, pdf_path = write_report(args.series, markdown)
    update_registry(args.series, md_path, pdf_path)
    print(f"✅ Discovery report generated:\n  - {md_path}\n  - {pdf_path}")

# -----------------------------------------------------------
if __name__ == "__main__":
    main()