# ================================================================
# üìà CEE LexMemory Visualization ‚Äî Phase 45G.10 Step 3
# ================================================================
"""
Visualizes the resonance drift (œÅ, ƒ™, SQI evolution) from the LexMemory
database across time. This module enables introspection into Aion‚Äôs
symbolic learning trajectory.

Source:
    data/memory/lex_memory.json

Output:
    data/telemetry/lexmemory_resonance_drift.png

Each memory entry (prompt ‚Üî answer) contributes its resonance history,
allowing aggregate trends to be visualized as Aion‚Äôs cognitive field matures.
"""

import json, time, logging
from pathlib import Path
import matplotlib.pyplot as plt
from statistics import mean

MEMORY_PATH = Path("data/memory/lex_memory.json")
OUT_PATH = Path("data/telemetry/lexmemory_resonance_drift.png")

logger = logging.getLogger(__name__)


# ================================================================
# üß† Load Memory
# ================================================================
def load_lex_memory():
    if not MEMORY_PATH.exists():
        logger.warning(f"[LexMemoryViz] No memory file found: {MEMORY_PATH}")
        return {}
    try:
        with open(MEMORY_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"[LexMemoryViz] Error loading LexMemory: {e}")
        return {}


# ================================================================
# üìä Generate Plot
# ================================================================
def plot_resonance_drift(memory_data: dict):
    if not memory_data:
        logger.warning("[LexMemoryViz] Empty memory data.")
        return None

    # Sort by last update
    entries = sorted(memory_data.items(), key=lambda kv: kv[1].get("last_update", 0))
    timestamps = [v.get("last_update", 0) for _, v in entries]
    labels = [k for k, _ in entries]
    œÅ_vals = [v.get("œÅ", 0) for _, v in entries]
    I_vals = [v.get("I", 0) for _, v in entries]
    SQI_vals = [v.get("SQI", 0) for _, v in entries]

    # Normalize timestamps ‚Üí relative (hours ago)
    now = time.time()
    rel_hours = [(t - timestamps[0]) / 3600 if timestamps else 0 for t in timestamps]

    # Averages
    œÅÃÑ, ƒ™ÃÑ, SQIÃÑ = mean(œÅ_vals), mean(I_vals), mean(SQI_vals)

    plt.figure(figsize=(10, 6))
    plt.plot(rel_hours, œÅ_vals, marker="o", label="œÅ ‚Äî Coherence", linewidth=2)
    plt.plot(rel_hours, I_vals, marker="s", label="ƒ™ ‚Äî Intensity", linewidth=2)
    plt.plot(rel_hours, SQI_vals, marker="^", label="SQI ‚Äî Symbolic Quality Index", linewidth=2)

    plt.title("üß† LexMemory Resonance Drift ‚Äî Aion Learning Trajectory", fontsize=14)
    plt.xlabel("Time since first memory (hours)", fontsize=12)
    plt.ylabel("Resonance Value", fontsize=12)
    plt.grid(True, alpha=0.3)
    plt.legend()
    plt.tight_layout()

    OUT_PATH.parent.mkdir(parents=True, exist_ok=True)
    plt.savefig(OUT_PATH, dpi=150)
    plt.close()

    logger.info(f"[LexMemoryViz] Exported resonance drift plot ‚Üí {OUT_PATH}")

    return {
        "entries": len(entries),
        "avg_œÅ": round(œÅÃÑ, 3),
        "avg_I": round(ƒ™ÃÑ, 3),
        "avg_SQI": round(SQIÃÑ, 3),
        "output": str(OUT_PATH),
    }


# ================================================================
# üöÄ Entry Point
# ================================================================
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    mem = load_lex_memory()
    result = plot_resonance_drift(mem)
    if result:
        print(json.dumps(result, indent=2))