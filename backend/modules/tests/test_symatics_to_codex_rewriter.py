import pytest
from backend.symatics import symatics_to_codex_rewriter as scr


def test_rewrite_simple_op():
    """Symatic âŠ• should map to canonical logic:âŠ•."""
    tree = {"op": "âŠ•", "args": ["A", "B"]}
    out = scr.rewrite_symatics_to_codex(tree)
    assert out["op"] == "logic:âŠ•"
    assert out["args"] == ["A", "B"]


def test_rewrite_nested_ops():
    """Nested Symatics ops should be recursively rewritten."""
    tree = {
        "op": "âŠ•",
        "args": [
            {"op": "â‹ˆ", "args": ["X", "Y"]},
            {"op": "A"}
        ]
    }
    out = scr.rewrite_symatics_to_codex(tree)
    assert out["op"] == "logic:âŠ•"
    assert out["args"][0]["op"] == "interf:â‹ˆ"


def test_rewrite_non_symatic_passthrough():
    """Non-Symatics ops should remain untouched."""
    tree = {"op": "logic:âˆ§", "args": ["P", "Q"]}
    out = scr.rewrite_symatics_to_codex(tree)
    assert out["op"] == "logic:âˆ§"
    assert out["args"] == ["P", "Q"]


def test_is_symatic_op_checks_known_and_unknown():
    assert scr.is_symatic_op("âŠ•") is True
    assert scr.is_symatic_op("â‹ˆ") is True
    assert scr.is_symatic_op("logic:âˆ§") is False
    assert scr.is_symatic_op("ðŸ’€") is False


def test_list_supported_symatics_returns_mapping():
    mapping = scr.list_supported_symatics()
    assert isinstance(mapping, dict)
    assert "âŠ•" in mapping
    assert mapping["âŠ•"].startswith("logic:")