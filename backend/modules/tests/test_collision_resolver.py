import pytest
from backend.modules.codex.collision_resolver import (
    resolve_collision,
    resolve_op,
    is_collision,
)


def test_is_collision_flags_known_symbols():
    assert is_collision("âŠ—") is True
    assert is_collision("âŠ•") is True
    assert is_collision("âˆ‡") is True
    assert is_collision("â†”") is True
    assert is_collision("âˆ§") is False  # not ambiguous


def test_resolve_collision_with_context():
    # Explicit context should win
    assert resolve_collision("âŠ—", context="physics") == "physics:âŠ—"
    assert resolve_collision("âŠ•", context="quantum") == "quantum:âŠ•"
    assert resolve_collision("âŠ—", context="symatics") == "symatics:âŠ—"


def test_resolve_collision_with_priority_order():
    # No context â†’ fallback to PRIORITY_ORDER
    # "âŠ—" has options [logic, physics, symatics], priority says logic first
    assert resolve_collision("âŠ—") == "logic:âŠ—"
    # "âŠ•" â†’ logic preferred over quantum
    assert resolve_collision("âŠ•") == "logic:âŠ•"
    # "â†”" â†’ logic preferred over quantum
    assert resolve_collision("â†”") == "logic:â†”"


def test_resolve_collision_unknown_symbol():
    # Non-collision or unknown â†’ None
    assert resolve_collision("âˆ§") is None
    assert resolve_collision("???") is None


# ğŸ”µ Alias and resolve_op tests
def test_resolve_op_aliases():
    # Aliases should map directly
    assert resolve_op("âŠ•_q") == "quantum:âŠ•"
    assert resolve_op("âŠ—_p") == "physics:âŠ—"
    assert resolve_op("âŠ—_s") == "symatics:âŠ—"
    assert resolve_op("~") == "photon:â‰ˆ"


def test_resolve_op_with_collision_priority():
    # Ambiguous symbol â†’ should follow PRIORITY_ORDER
    assert resolve_op("âŠ—") == "logic:âŠ—"  # logic wins
    assert resolve_op("âŠ•") == "logic:âŠ•"  # logic wins
    assert resolve_op("â†”") == "logic:â†”"  # logic wins


def test_resolve_op_fallback():
    # Unknown operator â†’ returned as-is
    assert resolve_op("??") == "??"