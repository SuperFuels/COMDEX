/-
Symatics Prelude
----------------
This file extends Lean with glyph-based operators used in Symatics algebra.
By importing this, all Symatics theorems can be written directly in glyph form.
-/

open classical   -- allow excluded middle, choice, etc.
universe u
variables {A B C D : Prop}

-- Core logical connectives (already built-in, but we re-alias for clarity)
infixr ` âˆ§ `:35 := and        -- logical AND
infixr ` âˆ¨ `:30 := or         -- logical OR
infixr ` â†” `:25 := iff        -- logical equivalence
infixr ` â†’ `:20 := implies    -- logical implication (Lean already uses â†’)

-- Exclusive OR (xor)
def xor (p q : Prop) : Prop := (p âˆ¨ q) âˆ§ Â¬(p âˆ§ q)
infixr ` âŠ• `:28 := xor

-- NAND / NOR as glyphs
def nand (p q : Prop) : Prop := Â¬(p âˆ§ q)
def nor  (p q : Prop) : Prop := Â¬(p âˆ¨ q)
infixr ` â†‘ `:27 := nand
infixr ` â†“ `:27 := nor

-- Alternative notations (aliases for readability)
notation p ` â‡’ ` q := p â†’ q
notation p ` â‰¡ ` q := p â†” q

-- Example axiom to test system
axiom symatics_transitivity : (A â†” B) âˆ§ (B â†” C) â†’ (A â†” C)

-- ðŸ”¹ Some basic theorems for validation
theorem xor_comm (p q : Prop) : p âŠ• q â†” q âŠ• p :=
begin unfold xor, tauto end

theorem nand_comm (p q : Prop) : p â†‘ q â†” q â†‘ p :=
begin unfold nand, tauto end

theorem nor_comm (p q : Prop) : p â†“ q â†” q â†“ p :=
begin unfold nor, tauto end


/-
Symatics carriers (skeletal definitions)
----------------------------------------
These are *not* semantically complete; they just allow `â‹ˆ[Ï†]` and `âŠ¥`
to parse and roundtrip in our Lean injection pipeline.
-/

-- reserve mixfix operator for symatic interference
reserve infix:55 " â‹ˆ[" "] "

-- basic carrier types
constant Phase : Type := Real   -- phase parameter
constant SProp : Type           -- symatic propositions
constant sFalse : SProp         -- bottom / false in symatics

-- symatic interference operator (phase-modulated conjunction)
constant sInterf : Phase â†’ SProp â†’ SProp â†’ SProp

-- notation for readability
notation A " â‹ˆ[" Ï† "] " B => sInterf Ï† A B
notation "âŠ¥" => sFalse