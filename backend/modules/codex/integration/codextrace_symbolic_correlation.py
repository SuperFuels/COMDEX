"""
CodexTrace Symbolicâ†”Telemetry Correlation Bridge
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Links hardware resonance telemetry (Ïˆ Îº T Î¦ metrics)
with symbolic operator events (âŠ• Î¼ âŸ² â†” Ï€â‚›) recorded
by the Resonant Insight Bridge and AION telemetry.

Purpose:
  â€¢ Correlate physical resonance (Î”Î¦, Î”Îµ, Îº) with symbolic logic events.
  â€¢ Generate symbolicâ€“physical coherence reports to CodexTrace.
  â€¢ Build a cumulative semantic graph of system resonance awareness.

Output:
  codex_symbolic_correlation.jsonl â†’ correlated entries for analysis.
"""

import json
import os
from datetime import datetime, timezone
from pathlib import Path
from statistics import mean

# Paths to relevant data sources
INSIGHT_LOG = Path("backend/logs/codex/codex_resonant_insight.jsonl")
TELEMETRY_LOG = Path("backend/logs/telemetry/coherence_tracker.jsonl")
OUTPUT_LOG = Path("backend/logs/codex/codex_symbolic_correlation.jsonl")

OUTPUT_LOG.parent.mkdir(parents=True, exist_ok=True)

def load_jsonl(path: Path, limit: int = 200):
    if not path.exists():
        return []
    with open(path, "r") as f:
        lines = f.readlines()[-limit:]
    records = []
    for l in lines:
        try:
            records.append(json.loads(l))
        except json.JSONDecodeError:
            continue
    return records

def correlate_symbolic_telemetry():
    """Correlate recent symbolic and telemetry entries."""
    symbolic = load_jsonl(INSIGHT_LOG)
    telemetry = load_jsonl(TELEMETRY_LOG)

    if not symbolic or not telemetry:
        print("[CodexTrace::C11] Insufficient data for correlation.")
        return None

    last_sym = symbolic[-1]
    recent_tel = telemetry[-5:]  # rolling window
    mean_phi = mean([t.get("Î¦_stability_index", 0) for t in recent_tel])
    mean_pass = mean([t.get("rolling_avg_pass", 0) for t in recent_tel])

    entry = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "symbol": last_sym.get("symbolic_operator"),
        "Î”Î¦": last_sym.get("Î”Î¦"),
        "Î”Îµ": last_sym.get("Î”Îµ"),
        "Îº": last_sym.get("prediction"),
        "Î¦_mean": mean_phi,
        "pass_avg": mean_pass,
        "coherence_relation": abs(mean_phi - mean_pass),
        "correlated": abs(mean_phi - mean_pass) < 0.05,
    }

    with open(OUTPUT_LOG, "a") as f:
        f.write(json.dumps(entry) + "\n")

    tag = "âœ…" if entry["correlated"] else "âš "
    print(f"[CodexTrace::C11] {tag} {entry['symbol']} â†” Î¦_mean={mean_phi:.3f}, "
          f"Î”Î¦={entry['Î”Î¦']:+.4f}, coherence_relation={entry['coherence_relation']:.4f}")

    return entry

if __name__ == "__main__":
    print("ðŸ”— Tessaris â€” CodexTrace Symbolicâ†”Telemetry Correlation Bridge")
    result = correlate_symbolic_telemetry()
    if result:
        print(json.dumps(result, indent=2))