"""add product_slugs to users

Revision ID: 04e6930d6364
Revises: 178ee1ed534e
Create Date: 2025-06-15 21:29:40.290811

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '04e6930d6364'
down_revision: Union[str, None] = '178ee1ed534e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('contracts', sa.Column('deal_id', sa.Integer(), nullable=False))
    op.add_column('contracts', sa.Column('terms', sa.Text(), nullable=True))
    op.alter_column('contracts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_contracts_deal_id'), 'contracts', ['deal_id'], unique=False)
    op.create_foreign_key(None, 'contracts', 'deals', ['deal_id'], ['id'], ondelete='CASCADE')
    op.drop_column('contracts', 'pdf_url')
    op.drop_column('contracts', 'prompt')
    op.drop_column('contracts', 'generated_contract')
    op.drop_column('contracts', 'status')

    op.add_column('deals', sa.Column('price', sa.Float(), nullable=False))
    op.alter_column('deals', 'product_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('deals', 'buyer_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('deals', 'supplier_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('deals', 'status',
               existing_type=sa.VARCHAR(),
               server_default='pending',
               nullable=False)
    op.alter_column('deals', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_deals_buyer_id'), 'deals', ['buyer_id'], unique=False)
    op.create_index(op.f('ix_deals_product_id'), 'deals', ['product_id'], unique=False)
    op.create_index(op.f('ix_deals_supplier_id'), 'deals', ['supplier_id'], unique=False)
    op.drop_constraint(op.f('deals_product_id_fkey'), 'deals', type_='foreignkey')
    op.drop_constraint(op.f('deals_buyer_id_fkey'), 'deals', type_='foreignkey')
    op.drop_constraint(op.f('deals_supplier_id_fkey'), 'deals', type_='foreignkey')
    op.create_foreign_key(None, 'deals', 'users', ['buyer_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'deals', 'products', ['product_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'deals', 'users', ['supplier_id'], ['id'], ondelete='CASCADE')
    op.drop_column('deals', 'product_title')
    op.drop_column('deals', 'supplier_email')
    op.drop_column('deals', 'pdf_url')
    op.drop_column('deals', 'buyer_email')

    op.alter_column('products', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('products', 'image_url',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('products', 'origin_country',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('products', 'category',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('products', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               type_=sa.DateTime(),
               nullable=False)
    op.create_index(op.f('ix_products_owner_id'), 'products', ['owner_id'], unique=False)
    # Temporarily disable unique title index due to existing duplicates
    # op.create_index(op.f('ix_products_title'), 'products', ['title'], unique=True)
    op.drop_constraint(op.f('products_owner_email_fkey'), 'products', type_='foreignkey')
    op.drop_column('products', 'change_pct')
    op.drop_column('products', 'batch_number')
    op.drop_column('products', 'rating')
    op.drop_column('products', 'trace_id')
    op.drop_column('products', 'owner_email')
    op.drop_column('products', 'blockchain_tx_hash')
    op.drop_column('products', 'certificate_url')

    op.add_column('users', sa.Column('product_slugs', sa.JSON(), nullable=True))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
    op.drop_column('users', 'products')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('products', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.drop_column('users', 'product_slugs')
    op.add_column('products', sa.Column('certificate_url', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('blockchain_tx_hash', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('owner_email', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('trace_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('batch_number', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('change_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('products_owner_email_fkey'), 'products', 'users', ['owner_email'], ['email'])
    # Re-enable unique title index after cleanup
    # op.create_index(op.f('ix_products_title'), 'products', ['title'], unique=True)
    op.drop_index(op.f('ix_products_owner_id'), table_name='products')
    op.alter_column('products', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('products', 'category',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('products', 'origin_country',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('products', 'image_url',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('products', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('deals', sa.Column('buyer_email', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('deals', sa.Column('pdf_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('deals', sa.Column('supplier_email', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('deals', sa.Column('product_title', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'deals', type_='foreignkey')
    op.drop_constraint(None, 'deals', type_='foreignkey')
    op.drop_constraint(None, 'deals', type_='foreignkey')
    op.create_foreign_key(op.f('deals_supplier_id_fkey'), 'deals', 'users', ['supplier_id'], ['id'])
    op.create_foreign_key(op.f('deals_buyer_id_fkey'), 'deals', 'users', ['buyer_id'], ['id'])
    op.create_foreign_key(op.f('deals_product_id_fkey'), 'deals', 'products', ['product_id'], ['id'])
    op.drop_index(op.f('ix_deals_supplier_id'), table_name='deals')
    op.drop_index(op.f('ix_deals_product_id'), table_name='deals')
    op.drop_index(op.f('ix_deals_buyer_id'), table_name='deals')
    op.alter_column('deals', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('deals', 'status',
               existing_type=sa.VARCHAR(),
               server_default=None,
               nullable=True)
    op.alter_column('deals', 'supplier_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('deals', 'buyer_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('deals', 'product_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('deals', 'price')
    op.add_column('contracts', sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('contracts', sa.Column('generated_contract', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('contracts', sa.Column('prompt', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('contracts', sa.Column('pdf_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'contracts', type_='foreignkey')
    op.drop_index(op.f('ix_contracts_deal_id'), table_name='contracts')
    op.alter_column('contracts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('contracts', 'terms')
    op.drop_column('contracts', 'deal_id')
    # ### end Alembic commands ###